// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"context"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

// Ensure, that SigsClientInterfaceMock does implement SigsClientInterface.
// If this is not the case, regenerate this file with moq.
var _ SigsClientInterface = &SigsClientInterfaceMock{}

// SigsClientInterfaceMock is a mock implementation of SigsClientInterface.
//
// 	func TestSomethingThatUsesSigsClientInterface(t *testing.T) {
//
// 		// make and configure a mocked SigsClientInterface
// 		mockedSigsClientInterface := &SigsClientInterfaceMock{
// 			CreateFunc: func(ctx context.Context, obj runtime.Object, opts ...k8sclient.CreateOption) error {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, obj runtime.Object, opts ...k8sclient.DeleteOption) error {
// 				panic("mock out the Delete method")
// 			},
// 			DeleteAllOfFunc: func(ctx context.Context, obj runtime.Object, opts ...k8sclient.DeleteAllOfOption) error {
// 				panic("mock out the DeleteAllOf method")
// 			},
// 			GetFunc: func(ctx context.Context, key types.NamespacedName, obj runtime.Object) error {
// 				panic("mock out the Get method")
// 			},
// 			GetSigsClientFunc: func() k8sclient.Client {
// 				panic("mock out the GetSigsClient method")
// 			},
// 			ListFunc: func(ctx context.Context, list runtime.Object, opts ...k8sclient.ListOption) error {
// 				panic("mock out the List method")
// 			},
// 			PatchFunc: func(ctx context.Context, obj runtime.Object, patch k8sclient.Patch, opts ...k8sclient.PatchOption) error {
// 				panic("mock out the Patch method")
// 			},
// 			StatusFunc: func() k8sclient.StatusWriter {
// 				panic("mock out the Status method")
// 			},
// 			UpdateFunc: func(ctx context.Context, obj runtime.Object, opts ...k8sclient.UpdateOption) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedSigsClientInterface in code that requires SigsClientInterface
// 		// and then make assertions.
//
// 	}
type SigsClientInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, obj runtime.Object, opts ...k8sclient.CreateOption) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, obj runtime.Object, opts ...k8sclient.DeleteOption) error

	// DeleteAllOfFunc mocks the DeleteAllOf method.
	DeleteAllOfFunc func(ctx context.Context, obj runtime.Object, opts ...k8sclient.DeleteAllOfOption) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key types.NamespacedName, obj runtime.Object) error

	// GetSigsClientFunc mocks the GetSigsClient method.
	GetSigsClientFunc func() k8sclient.Client

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, list runtime.Object, opts ...k8sclient.ListOption) error

	// PatchFunc mocks the Patch method.
	PatchFunc func(ctx context.Context, obj runtime.Object, patch k8sclient.Patch, opts ...k8sclient.PatchOption) error

	// StatusFunc mocks the Status method.
	StatusFunc func() k8sclient.StatusWriter

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, obj runtime.Object, opts ...k8sclient.UpdateOption) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj runtime.Object
			// Opts is the opts argument value.
			Opts []k8sclient.CreateOption
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj runtime.Object
			// Opts is the opts argument value.
			Opts []k8sclient.DeleteOption
		}
		// DeleteAllOf holds details about calls to the DeleteAllOf method.
		DeleteAllOf []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj runtime.Object
			// Opts is the opts argument value.
			Opts []k8sclient.DeleteAllOfOption
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key types.NamespacedName
			// Obj is the obj argument value.
			Obj runtime.Object
		}
		// GetSigsClient holds details about calls to the GetSigsClient method.
		GetSigsClient []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// List is the list argument value.
			List runtime.Object
			// Opts is the opts argument value.
			Opts []k8sclient.ListOption
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj runtime.Object
			// Patch is the patch argument value.
			Patch k8sclient.Patch
			// Opts is the opts argument value.
			Opts []k8sclient.PatchOption
		}
		// Status holds details about calls to the Status method.
		Status []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj runtime.Object
			// Opts is the opts argument value.
			Opts []k8sclient.UpdateOption
		}
	}
	lockCreate        sync.RWMutex
	lockDelete        sync.RWMutex
	lockDeleteAllOf   sync.RWMutex
	lockGet           sync.RWMutex
	lockGetSigsClient sync.RWMutex
	lockList          sync.RWMutex
	lockPatch         sync.RWMutex
	lockStatus        sync.RWMutex
	lockUpdate        sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SigsClientInterfaceMock) Create(ctx context.Context, obj runtime.Object, opts ...k8sclient.CreateOption) error {
	if mock.CreateFunc == nil {
		panic("SigsClientInterfaceMock.CreateFunc: method is nil but SigsClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.CreateOption
	}{
		Ctx:  ctx,
		Obj:  obj,
		Opts: opts,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, obj, opts...)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedSigsClientInterface.CreateCalls())
func (mock *SigsClientInterfaceMock) CreateCalls() []struct {
	Ctx  context.Context
	Obj  runtime.Object
	Opts []k8sclient.CreateOption
} {
	var calls []struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.CreateOption
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SigsClientInterfaceMock) Delete(ctx context.Context, obj runtime.Object, opts ...k8sclient.DeleteOption) error {
	if mock.DeleteFunc == nil {
		panic("SigsClientInterfaceMock.DeleteFunc: method is nil but SigsClientInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.DeleteOption
	}{
		Ctx:  ctx,
		Obj:  obj,
		Opts: opts,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, obj, opts...)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedSigsClientInterface.DeleteCalls())
func (mock *SigsClientInterfaceMock) DeleteCalls() []struct {
	Ctx  context.Context
	Obj  runtime.Object
	Opts []k8sclient.DeleteOption
} {
	var calls []struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.DeleteOption
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteAllOf calls DeleteAllOfFunc.
func (mock *SigsClientInterfaceMock) DeleteAllOf(ctx context.Context, obj runtime.Object, opts ...k8sclient.DeleteAllOfOption) error {
	if mock.DeleteAllOfFunc == nil {
		panic("SigsClientInterfaceMock.DeleteAllOfFunc: method is nil but SigsClientInterface.DeleteAllOf was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.DeleteAllOfOption
	}{
		Ctx:  ctx,
		Obj:  obj,
		Opts: opts,
	}
	mock.lockDeleteAllOf.Lock()
	mock.calls.DeleteAllOf = append(mock.calls.DeleteAllOf, callInfo)
	mock.lockDeleteAllOf.Unlock()
	return mock.DeleteAllOfFunc(ctx, obj, opts...)
}

// DeleteAllOfCalls gets all the calls that were made to DeleteAllOf.
// Check the length with:
//     len(mockedSigsClientInterface.DeleteAllOfCalls())
func (mock *SigsClientInterfaceMock) DeleteAllOfCalls() []struct {
	Ctx  context.Context
	Obj  runtime.Object
	Opts []k8sclient.DeleteAllOfOption
} {
	var calls []struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.DeleteAllOfOption
	}
	mock.lockDeleteAllOf.RLock()
	calls = mock.calls.DeleteAllOf
	mock.lockDeleteAllOf.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SigsClientInterfaceMock) Get(ctx context.Context, key types.NamespacedName, obj runtime.Object) error {
	if mock.GetFunc == nil {
		panic("SigsClientInterfaceMock.GetFunc: method is nil but SigsClientInterface.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key types.NamespacedName
		Obj runtime.Object
	}{
		Ctx: ctx,
		Key: key,
		Obj: obj,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key, obj)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSigsClientInterface.GetCalls())
func (mock *SigsClientInterfaceMock) GetCalls() []struct {
	Ctx context.Context
	Key types.NamespacedName
	Obj runtime.Object
} {
	var calls []struct {
		Ctx context.Context
		Key types.NamespacedName
		Obj runtime.Object
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetSigsClient calls GetSigsClientFunc.
func (mock *SigsClientInterfaceMock) GetSigsClient() k8sclient.Client {
	if mock.GetSigsClientFunc == nil {
		panic("SigsClientInterfaceMock.GetSigsClientFunc: method is nil but SigsClientInterface.GetSigsClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSigsClient.Lock()
	mock.calls.GetSigsClient = append(mock.calls.GetSigsClient, callInfo)
	mock.lockGetSigsClient.Unlock()
	return mock.GetSigsClientFunc()
}

// GetSigsClientCalls gets all the calls that were made to GetSigsClient.
// Check the length with:
//     len(mockedSigsClientInterface.GetSigsClientCalls())
func (mock *SigsClientInterfaceMock) GetSigsClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSigsClient.RLock()
	calls = mock.calls.GetSigsClient
	mock.lockGetSigsClient.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SigsClientInterfaceMock) List(ctx context.Context, list runtime.Object, opts ...k8sclient.ListOption) error {
	if mock.ListFunc == nil {
		panic("SigsClientInterfaceMock.ListFunc: method is nil but SigsClientInterface.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		List runtime.Object
		Opts []k8sclient.ListOption
	}{
		Ctx:  ctx,
		List: list,
		Opts: opts,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, list, opts...)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSigsClientInterface.ListCalls())
func (mock *SigsClientInterfaceMock) ListCalls() []struct {
	Ctx  context.Context
	List runtime.Object
	Opts []k8sclient.ListOption
} {
	var calls []struct {
		Ctx  context.Context
		List runtime.Object
		Opts []k8sclient.ListOption
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *SigsClientInterfaceMock) Patch(ctx context.Context, obj runtime.Object, patch k8sclient.Patch, opts ...k8sclient.PatchOption) error {
	if mock.PatchFunc == nil {
		panic("SigsClientInterfaceMock.PatchFunc: method is nil but SigsClientInterface.Patch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Obj   runtime.Object
		Patch k8sclient.Patch
		Opts  []k8sclient.PatchOption
	}{
		Ctx:   ctx,
		Obj:   obj,
		Patch: patch,
		Opts:  opts,
	}
	mock.lockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	mock.lockPatch.Unlock()
	return mock.PatchFunc(ctx, obj, patch, opts...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedSigsClientInterface.PatchCalls())
func (mock *SigsClientInterfaceMock) PatchCalls() []struct {
	Ctx   context.Context
	Obj   runtime.Object
	Patch k8sclient.Patch
	Opts  []k8sclient.PatchOption
} {
	var calls []struct {
		Ctx   context.Context
		Obj   runtime.Object
		Patch k8sclient.Patch
		Opts  []k8sclient.PatchOption
	}
	mock.lockPatch.RLock()
	calls = mock.calls.Patch
	mock.lockPatch.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *SigsClientInterfaceMock) Status() k8sclient.StatusWriter {
	if mock.StatusFunc == nil {
		panic("SigsClientInterfaceMock.StatusFunc: method is nil but SigsClientInterface.Status was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc()
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//     len(mockedSigsClientInterface.StatusCalls())
func (mock *SigsClientInterfaceMock) StatusCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SigsClientInterfaceMock) Update(ctx context.Context, obj runtime.Object, opts ...k8sclient.UpdateOption) error {
	if mock.UpdateFunc == nil {
		panic("SigsClientInterfaceMock.UpdateFunc: method is nil but SigsClientInterface.Update was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.UpdateOption
	}{
		Ctx:  ctx,
		Obj:  obj,
		Opts: opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, obj, opts...)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSigsClientInterface.UpdateCalls())
func (mock *SigsClientInterfaceMock) UpdateCalls() []struct {
	Ctx  context.Context
	Obj  runtime.Object
	Opts []k8sclient.UpdateOption
} {
	var calls []struct {
		Ctx  context.Context
		Obj  runtime.Object
		Opts []k8sclient.UpdateOption
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
