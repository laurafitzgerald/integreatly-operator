// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package marketplace

import (
	"context"
	coreosv1alpha1 "github.com/operator-framework/operator-lifecycle-manager/pkg/api/apis/operators/v1alpha1"
	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

// Ensure, that MarketplaceInterfaceMock does implement MarketplaceInterface.
// If this is not the case, regenerate this file with moq.
var _ MarketplaceInterface = &MarketplaceInterfaceMock{}

// MarketplaceInterfaceMock is a mock implementation of MarketplaceInterface.
//
// 	func TestSomethingThatUsesMarketplaceInterface(t *testing.T) {
//
// 		// make and configure a mocked MarketplaceInterface
// 		mockedMarketplaceInterface := &MarketplaceInterfaceMock{
// 			GetSubscriptionInstallPlansFunc: func(ctx context.Context, serverClient k8sclient.Client, subName string, ns string) (*coreosv1alpha1.InstallPlanList, *coreosv1alpha1.Subscription, error) {
// 				panic("mock out the GetSubscriptionInstallPlans method")
// 			},
// 			InstallOperatorFunc: func(ctx context.Context, serverClient k8sclient.Client, t Target, operatorGroupNamespaces []string, approvalStrategy coreosv1alpha1.Approval, catalogSourceReconciler CatalogSourceReconciler) error {
// 				panic("mock out the InstallOperator method")
// 			},
// 		}
//
// 		// use mockedMarketplaceInterface in code that requires MarketplaceInterface
// 		// and then make assertions.
//
// 	}
type MarketplaceInterfaceMock struct {
	// GetSubscriptionInstallPlansFunc mocks the GetSubscriptionInstallPlans method.
	GetSubscriptionInstallPlansFunc func(ctx context.Context, serverClient k8sclient.Client, subName string, ns string) (*coreosv1alpha1.InstallPlanList, *coreosv1alpha1.Subscription, error)

	// InstallOperatorFunc mocks the InstallOperator method.
	InstallOperatorFunc func(ctx context.Context, serverClient k8sclient.Client, t Target, operatorGroupNamespaces []string, approvalStrategy coreosv1alpha1.Approval, catalogSourceReconciler CatalogSourceReconciler) error

	// calls tracks calls to the methods.
	calls struct {
		// GetSubscriptionInstallPlans holds details about calls to the GetSubscriptionInstallPlans method.
		GetSubscriptionInstallPlans []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServerClient is the serverClient argument value.
			ServerClient k8sclient.Client
			// SubName is the subName argument value.
			SubName string
			// Ns is the ns argument value.
			Ns string
		}
		// InstallOperator holds details about calls to the InstallOperator method.
		InstallOperator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServerClient is the serverClient argument value.
			ServerClient k8sclient.Client
			// T is the t argument value.
			T Target
			// OperatorGroupNamespaces is the operatorGroupNamespaces argument value.
			OperatorGroupNamespaces []string
			// ApprovalStrategy is the approvalStrategy argument value.
			ApprovalStrategy coreosv1alpha1.Approval
			// CatalogSourceReconciler is the catalogSourceReconciler argument value.
			CatalogSourceReconciler CatalogSourceReconciler
		}
	}
	lockGetSubscriptionInstallPlans sync.RWMutex
	lockInstallOperator             sync.RWMutex
}

// GetSubscriptionInstallPlans calls GetSubscriptionInstallPlansFunc.
func (mock *MarketplaceInterfaceMock) GetSubscriptionInstallPlans(ctx context.Context, serverClient k8sclient.Client, subName string, ns string) (*coreosv1alpha1.InstallPlanList, *coreosv1alpha1.Subscription, error) {
	if mock.GetSubscriptionInstallPlansFunc == nil {
		panic("MarketplaceInterfaceMock.GetSubscriptionInstallPlansFunc: method is nil but MarketplaceInterface.GetSubscriptionInstallPlans was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ServerClient k8sclient.Client
		SubName      string
		Ns           string
	}{
		Ctx:          ctx,
		ServerClient: serverClient,
		SubName:      subName,
		Ns:           ns,
	}
	mock.lockGetSubscriptionInstallPlans.Lock()
	mock.calls.GetSubscriptionInstallPlans = append(mock.calls.GetSubscriptionInstallPlans, callInfo)
	mock.lockGetSubscriptionInstallPlans.Unlock()
	return mock.GetSubscriptionInstallPlansFunc(ctx, serverClient, subName, ns)
}

// GetSubscriptionInstallPlansCalls gets all the calls that were made to GetSubscriptionInstallPlans.
// Check the length with:
//     len(mockedMarketplaceInterface.GetSubscriptionInstallPlansCalls())
func (mock *MarketplaceInterfaceMock) GetSubscriptionInstallPlansCalls() []struct {
	Ctx          context.Context
	ServerClient k8sclient.Client
	SubName      string
	Ns           string
} {
	var calls []struct {
		Ctx          context.Context
		ServerClient k8sclient.Client
		SubName      string
		Ns           string
	}
	mock.lockGetSubscriptionInstallPlans.RLock()
	calls = mock.calls.GetSubscriptionInstallPlans
	mock.lockGetSubscriptionInstallPlans.RUnlock()
	return calls
}

// InstallOperator calls InstallOperatorFunc.
func (mock *MarketplaceInterfaceMock) InstallOperator(ctx context.Context, serverClient k8sclient.Client, t Target, operatorGroupNamespaces []string, approvalStrategy coreosv1alpha1.Approval, catalogSourceReconciler CatalogSourceReconciler) error {
	if mock.InstallOperatorFunc == nil {
		panic("MarketplaceInterfaceMock.InstallOperatorFunc: method is nil but MarketplaceInterface.InstallOperator was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		ServerClient            k8sclient.Client
		T                       Target
		OperatorGroupNamespaces []string
		ApprovalStrategy        coreosv1alpha1.Approval
		CatalogSourceReconciler CatalogSourceReconciler
	}{
		Ctx:                     ctx,
		ServerClient:            serverClient,
		T:                       t,
		OperatorGroupNamespaces: operatorGroupNamespaces,
		ApprovalStrategy:        approvalStrategy,
		CatalogSourceReconciler: catalogSourceReconciler,
	}
	mock.lockInstallOperator.Lock()
	mock.calls.InstallOperator = append(mock.calls.InstallOperator, callInfo)
	mock.lockInstallOperator.Unlock()
	return mock.InstallOperatorFunc(ctx, serverClient, t, operatorGroupNamespaces, approvalStrategy, catalogSourceReconciler)
}

// InstallOperatorCalls gets all the calls that were made to InstallOperator.
// Check the length with:
//     len(mockedMarketplaceInterface.InstallOperatorCalls())
func (mock *MarketplaceInterfaceMock) InstallOperatorCalls() []struct {
	Ctx                     context.Context
	ServerClient            k8sclient.Client
	T                       Target
	OperatorGroupNamespaces []string
	ApprovalStrategy        coreosv1alpha1.Approval
	CatalogSourceReconciler CatalogSourceReconciler
} {
	var calls []struct {
		Ctx                     context.Context
		ServerClient            k8sclient.Client
		T                       Target
		OperatorGroupNamespaces []string
		ApprovalStrategy        coreosv1alpha1.Approval
		CatalogSourceReconciler CatalogSourceReconciler
	}
	mock.lockInstallOperator.RLock()
	calls = mock.calls.InstallOperator
	mock.lockInstallOperator.RUnlock()
	return calls
}
